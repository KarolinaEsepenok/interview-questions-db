{
  "questionText": "Какой код будет работать подобно методу жизненного цикла `componentDidMount`?",
  "type": "radio",
  "answers": [
    {
      "text": "`useEffect(() => { ... })`",
      "isCorrect": false
    },
    {
      "text": "`useEffect(() => { return () => { ... } }, [dependencies])`",
      "isCorrect": false
    },
    {
      "text": "`useEffect(() => { return () => { ... } })`",
      "isCorrect": false
    },
    {
      "text": "`useEffect(() => { ... }, [])`",
      "isCorrect": true
    }
  ],
  "descriptionMarkup": "Подобный вопрос могут спросить на собесе, однако Ден Абрамов пишет, что ментальная модель для `useEffect` не жизненный цикл, а синхронизация c \"внешними системами\"(DOM, server API и т.д.). В [документации](https://beta.reactjs.org/learn/lifecycle-of-reactive-effects) говорится, что лучше думать об Эффектах независимо от жизненного цикла: они просто устанавливают синхронизацию(в теле эффект-функции), и прерывают синхронизацию(в cleanup-функции). \n\n Видео доклада [Goodbye, useEffect](https://youtu.be/bGzanfKVFeU?t=144) с конференции React Brussels, раскрывающее эту тему."
}
